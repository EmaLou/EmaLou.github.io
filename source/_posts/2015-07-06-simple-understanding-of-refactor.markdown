---
layout: post
title: "浅谈重构"
date: 2015-07-06 11:23:13 +0800
comments: true
categories: 
---

####What is refactor ？

“重构这个概念来自small talk的圈子。。。当开发人员精炼自己的类继承体系，当他们喊自己可以拿掉多少多少行代码时，重构的概念慢慢浮出水面”

“所谓重构，是这样一个过程：在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构”

-- 摘自 《重构-改善既有代码的设计》Martin Fowler 著

上面两段话概括了重构的起源和经过无数前辈精炼后的概念，对于初学者，请先记住这两句话，后面的内容可以帮助大家理解。

可能有人会问，不改变代码行为，如何对代码做出修改，不是为了这样的功能，我何必这样写呢？

我的回答是，那你还有很多要学的，继续往下看。

####Why refactor
“如果没有重构，程序的设计会逐渐腐败变质”

举个例子，有类 A，里面有函数Func X 实现了某一个功能，现在需要再另外一个类B 里实现同样的功能，出于某种原因，不能直接调用Class A 的X 方法。那么最简单的就是copy Func X 到类B里，如果类C 也需要这个方法，那么再copy。

且不说有多少重复代码，如果有一天实现这个功能的代码需要改动，需要改动至少三处，漏了一处就会造成功能缺失。

“事不过三，三则重构”，当最开始发现同样的函数写了三遍时，就该考虑是不是可以把它抽出来放到一个单独的类里，需要使用这个方法的类来继承这个父类。不仅减少了重复代码，而且未来需要改动时需要的开销也会大大降低。

类似的例子还有很多。比如一个类中有很多不表意的变量名，另一个程序员需要改动的时候要先花很多时间去理解每一个变量都代表什么，会大大拖慢项目进程。再比如一个方法写的很长，那么如果这里面出了bug，将需要很长的时间来调试才能找到它，如果这个bug是方法写好后几个月才发现的，那么理解当时的逻辑又是一件费时费力的事情。

所以当我们发现不表意的变量名，过长的方法或过大的类，以及重复代码时。就需要进行适当的重构，以保证代码质量。

说了这么多，其实都是为了引出一个概念 - “代码坏味道”。

上面举得种种例子，都是代码坏味道。回答了最初的问题，why refactor？当发现代码代码坏味道的时候，需要进行重构消除坏味道来保证质量。

#### What is 代码坏味道

程序员对代码坏味道的甄别应该有着自己的判断，这里给出一些例子来对初学者进行指引。

重构的书里讲了22种代码坏味道，笔者认为作为初学者，最重要的是理解这个概念以及“闻到”一些显而易见的坏味道。以下几种坏味道比较适合初学者。

#####1. 重复代码（Duplicate Code）
上面提到的重复代码是最简单的情形，不同类或者同一个类中含有相同的表达式。需要提出重复的代码（Extract Method）

 另一种常见情况是，两个互为兄弟的子类内含相同表达式。这时需要提出重复代码之后再将其推入他们的父类。

 如果代码只是相似但并不完全相同，那么首先提取出相同的部分构成一个函数，然后再不同的地方调用这个函数

总之，当逻辑相同或类似的代码出现在不止一个地方时，那么就该考虑抽方法了。

#####2. 过长函数（Long Method）
如果在写代码的过程中录像，回头看的时候就会发现其实有很大一部分时间我们是在看代码，剩下的时间用来写。如果函数太长或逻辑过于复杂，那么看代码的时间会加长，同时复杂的逻辑也难以阅读，测试和维护。

把过长的函数拆成小函数成为了大势所趋，而读懂小函数的关键在于合理的命名，如果读者通过命名就可以了解函数在做什么，那么根本不必去看中间写了什么。

问题又来了，什么时候拆呢？

有这样一条原则“每当感觉需要以注释来说明点什么的时候，就需要把说明的东西写进一个独立函数，然后用其用途（而非实现手法）命名”，即使替换后函数调用本身比函数还长，即使函数只有一行代码，只要命名可以解释其用途，那么就是值得的。Extract Method可以做到这一点。

#####3. 过大的类（Large Class）
当一个类做了过多的事情时，它就变成了“超级类”，接踵而来的就是代码重复，变量太多，难以阅读和维护等。

这种类内一般会有大量变量，但它们并不是时刻被用到。将彼此关联的变量提到新类中可以解决这个问题。

比如Dog类里有name，age，color，type等变量，cat类中也有这些变量，这两个类都做了很多事情。这时候，将name 和 age 提到animal 类中，再用dog类和cat类继承animal类，可以有效减少变量。

对于类中过长的代码，利用上面提到的Extract Method来抽方法，尽量减少重复的代码。

#####4. 过长参数列（Long Parameter List）
相信大家都见过过长的参数列表，难以理解，如果需要更多的变量就不得不修改方法本身何其调用方。换一种角度，如果有多个变量属于一个对象，那么直接把该对象传给这个方法会更容易，因为当你需要更多变量时，直接从对象中取值就行。大大缩短了参数列。

并不是说一定要传对象，有时候不想造成被调对象和对象间过多依赖的时候，会选择将对象中的变量拿出来单独进行传参。这种时候需要自己进行权衡哪种方式更适合当前的情况。

#####5. 基本类型偏执（Primitive Obsession）
初学者可能会问，用基本类型为什么不好呢？

注意这里有个词“偏执”，有时候用简单对象更加表意，但是却还是选择数组或者其它基本类型来编程。这种坏味道多出现在面向对象初学者的代码里。

eg，结合数值和币种的money类，电话号码或邮政编码等特殊字符，用基本类型完全可以解决。但是既然学习了面向对象编程，何不把它们都编程更表意的对象。一个money数组，money[0]是数值，money[1]是币种，每个人看到这段代码都要回到定义money的地方看这两个值的意义。如果有一个money类，money.count 表示数值，money.type 表示币种。不是更加清晰和易读吗？

#####6. 过多的注释（Comments）

注释是为了解释代码，但如果代码写的足够清晰和整洁，为什么需要注释呢？

就像前面说的，如果一个长方法写了很多注释解释每一行都在干吗，把长方法拆成短方法，用短方法的函数名来解释自己，从而最终解释了所有代码，是一件喜闻乐见的事情。

“当你感觉需要写注释时，请先尝试重构，试着让所有注释都变得多余”

当然，必要的注释还是不可少的。用来提醒开发人员需要改动的部分，或者跟系统相关的内容。

识别出代码坏味道是重构的第一步，利用重构技巧来消除坏味道才是真正的重构过程。

上面已经提到了一些简单的重构技巧，对于初学者最重要的是识别坏味道，先掌握简单的技巧。回头看一下自己写过的代码，如果看到写的不合适的地方，意识到需要重构，那么恭喜入门。






